Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 

Solution :
/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/

public class Solution {


	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> headd) {
   
        LinkedListNode<Integer> head= new LinkedListNode<>(0);
        head.next = headd;
		//reverse linked list
        LinkedListNode<Integer> curr = head;
        LinkedListNode<Integer> prev = null;
        LinkedListNode<Integer> next = null;
        
        while(curr!=null){
            next = curr.next;
            curr.next = prev;
			prev = curr;
            curr = next;
        }
        
        //prev will have head of the reversed linked list
        //add 1 to linked list;
        
        int carry = 1;
        curr = prev;
        while(curr!=null){
            int x = curr.data;
            x = x+carry;
            if(x>9){
                curr.data= Integer.valueOf(x%10);
                carry = 1;
            }
            else{
                curr.data = Integer.valueOf(x);
                carry = 0;
            }
            curr = curr.next;
        }
        
        
        curr = prev;
        prev = null;
		next = null;
        while(curr!=null){
            next = curr.next;
            curr.next = prev;
			prev = curr;
            curr = next;
        }
        
        if(prev.data.equals(0))
           return prev.next;
        return prev;
	}


}
